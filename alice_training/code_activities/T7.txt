# Activity1

## 1.1

userparams
  SHORT_TERM_PERIOD: "The number of minutes to look back": 15;
  BENPERIOD: "The number of trading days for benchmarking": 30;
  ST_DEV: "The number of standard deviations away from distribution mean": 2;
end userparams

declare threshold[security]: percent
declare change_price_dist[security]: distribution

on trade
  declare let one_minute = 1 minutes
  declare let tap = SHORT_TERM_PERIOD * one_minute
  declare let time_tap = time - tap
  
  if controlstatus(security) = "O" then
    declare let comp_price = trueprice(time_tap)
    
    if undefined(comp_price) then
      comp_price = lastprice
    end if
    
    if defined(comp_price) then
      declare let price_change = abs(change(price, comp_price))
      declare let dir_str = format(price_change > 0%,"increased","decreased")

      if price_change > threshold[security] then
        alert 101, "STPM", "SHORT TERM PRICE MOVEMENT: [security] has
        [dir_str] in price from [comp_price] to [price] in the last [SHORT_TERM_PERIOD]
        minutes. This is an [dir_str] of [price_change], which
        is greater than the threshold of [threshold[security]].",
        intensity = (price_change - threshold[security])/price_change * 100,
        reissue = "101S+10"
      end if
      
    end if

  end if

end on

Benchmarks_below: BENPERIOD trdays

on trade
  declare let one_minute = 1 minutes
  declare let tap = SHORT_TERM_PERIOD * one_minute
  declare let time_tap = time - tap
 
  declare let comp_price = trueprice(time_tap)
  if undefined(comp_price) then
    comp_price = lastprice
  end if
  declare let price_change = abs(change(price, comp_price))
 
  if defined(price_change) then
   change_price_dist[security] <- price_change
  end if

end on 

at end
  per security
    if defined(change_price_dist[security]) then
      declare let mean = distaverage(change_price_dist[security])
      declare let std = diststdev(change_price_dist[security])
      threshold[security] = (mean + ST_DEV*std) * 100%
    end if
  end per
end at

## 1.2

userparams
  SHORT_TERM_PERIOD: "The number of minutes to look back": 15;
  BENPERIOD: "The number of trading days for benchmarking": 30;
  ST_DEV: "The number of standard deviations away from distribution mean": 2;
  HURDLE: "Threshold for observations less than 50": 3%;
end userparams

declare threshold[security]: percent
declare change_price_dist[security]: distribution

on trade
  declare let one_minute = 1 minutes
  declare let tap = SHORT_TERM_PERIOD * one_minute
  declare let time_tap = time - tap
  
  if controlstatus(security) = "O" then
    declare let comp_price = trueprice(time_tap)
    
    if undefined(comp_price) then
      comp_price = lastprice
    end if
    
    if defined(comp_price) then
      declare let price_change = abs(change(price, comp_price))
      declare let dir_str = format(price_change > 0%,"increased","decreased")

      if price_change > threshold[security] then
        alert 101, "STPM", "SHORT TERM PRICE MOVEMENT: [security] has
        [dir_str] in price from [comp_price] to [price] in the last [SHORT_TERM_PERIOD]
        minutes. This is an [dir_str] of [price_change], which
        is greater than the threshold of [threshold[security]].",
        intensity = (price_change - threshold[security])/price_change * 100,
        reissue = "101S+10"
      end if
      
    end if

  end if

end on

Benchmarks_below: BENPERIOD trdays

on trade
  declare let one_minute = 1 minutes
  declare let tap = SHORT_TERM_PERIOD * one_minute
  declare let time_tap = time - tap
 
  declare let comp_price = trueprice(time_tap)
  if undefined(comp_price) then
    comp_price = lastprice
  end if
  declare let price_change = abs(change(price, comp_price))
 
  if defined(price_change) then
   change_price_dist[security] <- price_change
  end if

end on 

at end
  per security
    if defined(change_price_dist[security]) then
      declare let num_objs = distcount(change_price_dist[security])

      if num_objs > 200 then
        declare let mean = distaverage(change_price_dist[security])
        declare let std = diststdev(change_price_dist[security])
        threshold[security] = (mean + ST_DEV*std) * 100%
      elsif num_objs > 50 then
        threshold[security] = distcutoff(change_price_dist[security], 95%) * 100%
      else
        threshold[security] = HURDLE
      end if

    end if
  end per
end at

## 1.2

userparams
  SHORT_TERM_PERIOD: "The number of minutes to look back": 15;
  BENPERIOD: "The number of trading days for benchmarking": 30;
  ST_DEV: "The number of standard deviations away from distribution mean": 2;
  HURDLE: "Threshold for observations less than 50": 3%;
end userparams

declare threshold[security]: percent
declare change_price_dist[security]: distribution

on trade
  declare let one_minute = 1 minutes
  declare let tap = SHORT_TERM_PERIOD * one_minute
  declare let time_tap = time - tap
  
  if controlstatus(security) = "O" then
    declare let comp_price = trueprice(time_tap)
    
    if undefined(comp_price) then
      comp_price = lastprice
    end if
    
    if defined(comp_price) then
      declare let price_change = abs(change(price, comp_price))
      declare let dir_str = format(price_change > 0%,"increased","decreased")

      if price_change > threshold[security] then
        alert 101, "STPM", "SHORT TERM PRICE MOVEMENT: [security] has
        [dir_str] in price from [comp_price] to [price] in the last [SHORT_TERM_PERIOD]
        minutes. This is an [dir_str] of [price_change], which
        is greater than the threshold of [threshold[security]].",
        intensity = (price_change - threshold[security])/price_change * 100,
        reissue = "101S+10"
      end if
      
    end if

  end if

end on

Benchmarks_below: BENPERIOD trdays

on trade
  declare let one_minute = 1 minutes
  declare let tap = SHORT_TERM_PERIOD * one_minute
  declare let time_tap = time - tap
 
  declare let comp_price = trueprice(time_tap)
  if undefined(comp_price) then
    comp_price = lastprice
  end if
  declare let price_change = abs(change(price, comp_price))
 
  if defined(price_change) then
   change_price_dist[security] <- price_change
  end if

end on 

at end
  per security
    if defined(change_price_dist[security]) then
      declare let num_objs = distcount(change_price_dist[security])

      if num_objs > 200 then
        declare let mean = distaverage(change_price_dist[security])
        declare let std = diststdev(change_price_dist[security])
        threshold[security] = (mean + ST_DEV*std) * 100%
      elsif num_objs > 50 then
        threshold[security] = distcutoff(change_price_dist[security], 95%) * 100%
      else
        threshold[security] = HURDLE
      end if

    end if
  end per
end at



## 1.3


userparams
  SHORT_TERM_PERIOD: "The number of minutes to look back": 15;
  BENPERIOD: "The number of trading days for benchmarking": 30;
  ST_DEV: "The number of standard deviations away from distribution mean": 2;
  HURDLE: "Threshold for observations less than 50": 3%;
end userparams

declare threshold[security]: percent
declare change_price_dist[security]: distribution

on trade
  if flag(+ON) then
  
    declare let one_minute = 1 minutes
    declare let tap = SHORT_TERM_PERIOD * one_minute
    declare let time_tap = time - tap

    if controlstatus(security) = "O" then
      declare let comp_price = trueprice(time_tap)

      if undefined(comp_price) then
        comp_price = lastprice
      end if

      if defined(comp_price) then
        declare let price_change = abs(change(price, comp_price))
        declare let dir_str = format(price_change > 0%,"increased","decreased")

        if price_change > threshold[security] then
          alert 101, "STPM", "SHORT TERM PRICE MOVEMENT: [security] has
          [dir_str] in price from [comp_price] to [price] in the last [SHORT_TERM_PERIOD]
          minutes. This is an [dir_str] of [price_change], which
          is greater than the threshold of [threshold[security]].",
          intensity = (price_change - threshold[security])/price_change * 100,
          reissue = "101S+10"
        end if

      end if

    end if

  end if
end on

Benchmarks_below: BENPERIOD trdays

on trade
  if flag(+ON) then
  
    declare let one_minute = 1 minutes
    declare let tap = SHORT_TERM_PERIOD * one_minute
    declare let time_tap = time - tap

    declare let comp_price = trueprice(time_tap)
    if undefined(comp_price) then
      comp_price = lastprice
    end if
    declare let price_change = abs(change(price, comp_price))

    if defined(price_change) then
    change_price_dist[security] <- price_change
    end if

  end if
end on 

at end
  per security
    if defined(change_price_dist[security]) then
      declare let num_objs = distcount(change_price_dist[security])

      if num_objs > 200 then
        declare let mean = distaverage(change_price_dist[security])
        declare let std = diststdev(change_price_dist[security])
        threshold[security] = (mean + ST_DEV*std) * 100%
      elsif num_objs > 50 then
        threshold[security] = distcutoff(change_price_dist[security], 95%) * 100%
      else
        threshold[security] = HURDLE
      end if

    end if
  end per
end at



# 2

at end
  declare let old_date = trday(date, -30)

  per security
    declare let avg_count = tcount(date, old_date) / 30
    print "[security]'s past 30 days average trade-count is: [avg_count]"
  end per

end at





